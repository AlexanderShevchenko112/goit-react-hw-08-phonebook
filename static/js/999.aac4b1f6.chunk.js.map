{"version":3,"file":"static/js/999.aac4b1f6.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","components/contactForm/ContactForm.module.css","components/contactForm/ContactForm.jsx","components/contactsListItem/contactsListItem.module.css","components/contactsListItem/contactsListItem.jsx","webpack://react-homework-template/./src/components/contactsList/ContactsList.module.css?908f","components/contactsList/ContactsList.jsx","components/filter/Filter.module.css","components/filter/Filter.jsx","components/phonebook/Phonebook.jsx","pages/contacts/Contacts.jsx"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {};","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport css from 'components/contactForm/ContactForm.module.css';\nconst ContactForm = () => {\n  const contacts = useSelector(state => state.contacts.items);\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const isDuplicateContact = name => {\n    return contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const newContact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n    if (isDuplicateContact(name)) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    dispatch(addContact(newContact));\n    setName('');\n    setNumber('');\n  };\n  return (\n    <form onSubmit={handleSubmit} className={css.form}>\n      <label htmlFor=\"nameInput\">Name: </label>\n      <input\n        type=\"text\"\n        id=\"nameInput\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        value={name}\n        onChange={handleChange}\n      />\n      <label htmlFor=\"numberInput\">Number: </label>\n      <input\n        type=\"tel\"\n        id=\"numberInput\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        value={number}\n        onChange={handleChange}\n      />\n      <button type=\"submit\" className={css.addBtn}>\n        Add Contact\n      </button>\n    </form>\n  );\n};\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {};","import css from 'components/contactsListItem/contactsListItem.module.css';\nimport PropTypes from 'prop-types';\nconst ContactsListItem = ({ contact, onDeleteContact }) => (\n  <li className={css.listItem}>\n    {contact.name} : {contact.number}\n    <button\n      className={css.deleteBtn}\n      type=\"button\"\n      onClick={() => onDeleteContact(contact.id)}\n    >\n      Delete\n    </button>\n  </li>\n);\nContactsListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default ContactsListItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactsList_contactList__K5iHD\"};","import { useSelector, useDispatch } from 'react-redux';\nimport ContactsListItem from 'components/contactsListItem/contactsListItem';\nimport css from 'components/contactsList/ContactsList.module.css';\nimport { deleteContact } from 'redux/operations';\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => {\n    return state.contacts.items.filter(contact =>\n      contact.name.toLowerCase().includes(state.filter.trim().toLowerCase())\n    );\n  });\n\n  const handleDelete = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <ul className={css.contactList}>\n      {contacts.map(contact => (\n        <ContactsListItem\n          key={contact.id}\n          contact={contact}\n          onDeleteContact={handleDelete}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {};","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\nimport css from 'components/filter/Filter.module.css';\n\nconst Filter = () => {\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    dispatch(setFilter(event.target.value));\n  };\n\n  return (\n    <div className={css.filter}>\n      <label htmlFor=\"filterInput\">Filter contacts by name: </label>\n      <input\n        type=\"text\"\n        id=\"filterInput\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n","import ContactForm from 'components/contactForm/ContactForm';\nimport ContactList from 'components/contactsList/ContactsList';\nimport Filter from 'components/filter/Filter';\n\nconst Phonebook = () => {\n  return (\n    <>\n      <div>\n        <ContactForm />\n        <Filter />\n      </div>\n      <h2>Phonebook</h2>\n      <ContactList />\n    </>\n  );\n};\n\nexport default Phonebook;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport Phonebook from 'components/phonebook/Phonebook';\nimport { fetchContacts } from 'redux/operations';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(state => state.contacts.isLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Phonebook</title>\n      </Helmet>\n      <div>{isLoading && 'Loading...'}</div>\n      <Phonebook />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","contacts","useSelector","state","items","dispatch","useDispatch","useState","name","setName","number","setNumber","handleChange","event","target","value","onSubmit","preventDefault","newContact","some","contact","toLowerCase","isDuplicateContact","addContact","alert","className","css","htmlFor","type","pattern","title","required","onChange","onDeleteContact","onClick","filter","includes","trim","handleDelete","deleteContact","map","setFilter","isLoading","useEffect","fetchContacts","Helmet"],"sourceRoot":""}